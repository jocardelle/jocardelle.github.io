[
  {
    "objectID": "DELETE-LATER/practice.html",
    "href": "DELETE-LATER/practice.html",
    "title": "Here is my level one header",
    "section": "",
    "text": "Here is my level one header\nHere is my first paragraph\nHere is my second paragraph, where you can read more about MEDS.\nThis is very important text!"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "Visualizing the effects of the 2017 Thomas Fire in Santa Barbara County\n\n\n\nPython\n\n\nGeospatial\n\n\nMEDS\n\n\n\nAir quality index and true vs. false color imagery\n\n\n\nJosephine Cardelle\n\n\nDec 1, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Josephine Cardelle",
    "section": "",
    "text": "Hi everyone! I’m Josephine (Jo) Cardelle, a current Master of Environmental Data Science student at UC Santa Barbara. I have a passion for using data science to problem-solve issues around climate change, natural resource protection, and food security facing our agriculture industry. I also have a degree in Civil Engineering and am excited to utilize both these degrees to broaden my impact on environmental issues. Outside of work and school I love hiking, running, reading, scuba diving and traveling. Check out my site to learn more and feel free to reach out!"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Josephine Cardelle",
    "section": "Education",
    "text": "Education\nMaster of Environmental Data Science (Expected June 2024)\n\nBren School of Environmental Science & Management, UCSB\n\nBachelor of Engineering, Civil Engineering (May 2021)\n\nMcGill University\nSpecialization in Geotechnical Engineering"
  },
  {
    "objectID": "index.html#professional-experience",
    "href": "index.html#professional-experience",
    "title": "Josephine Cardelle",
    "section": "Professional Experience",
    "text": "Professional Experience\nCivil/Agricultural Engineer (January 2022 - April 2024)\n\nUSDA - Natural Resources Conservation Service\nCommonwealth of the Northern Mariana Islands (CNMI)\n\nEngineering Undergraduate Researcher (May 2019 - August 2019)\n\nEnvironmental Geomechanics Laboratory - McGill University\n\nConservation Corps (July 2021 - October 2021)\n\nAmeriCorps - American Conservation Experience\nHurricane, Utah"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html",
    "href": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html",
    "title": "Visualizing the effects of the 2017 Thomas Fire in Santa Barbara County",
    "section": "",
    "text": "Github Repository"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#about",
    "href": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#about",
    "title": "Visualizing the effects of the 2017 Thomas Fire in Santa Barbara County",
    "section": "About",
    "text": "About\nThe Thomas Fire, which burned across Santa Barbara and Ventura counties in December 2017, has been one of California’s largest wildfires, devastating over 280,000 acres of land. The fire started on December 4, 2017 and was considered contained on January 2, 2018. In this task, I first used Air Quality Index (AQI) data from the US Environmental Protection Agency to visualize the impact on the AQI of the 2017 Thomas Fire in Santa Barbara County. I then visualized the effects of the fire on the land through using true and false color imagery.\n\n\nPalm trees are consumed by the Thomas Fire. Photo credit: Marcus Yam / Los Angeles Times"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#highlights",
    "href": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#highlights",
    "title": "Visualizing the effects of the 2017 Thomas Fire in Santa Barbara County",
    "section": "Highlights",
    "text": "Highlights\n\nCombining data frames\nSelecting data from large datasets\nData wrangling with dates\nVisualizing time series\nUsing rolling() to find a rolling average\nTrue vs. false color imagery"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#datasets",
    "href": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#datasets",
    "title": "Visualizing the effects of the 2017 Thomas Fire in Santa Barbara County",
    "section": "Datasets",
    "text": "Datasets\nThe first two data set contain information from the US Environmental Protection Agency(EPA) regarding AQI. They contain information regarding daily AQI by county in 2017 and 2018.\nThe fire perimeter data was obtained from https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436. It contains the spatial distribution of large fires in California. It covers fires that date back to 1878.\nThe landsat data was obtained from https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2 and is from January 26, 2018. The fire perimeter data is from https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436 and was accessed through the server at /courses/EDS220/data/hwk4_landsat_data landsat8-2018-01-26-sb-simplified.nc. It contains the spatial distribution of large fires in California and was pre-processed to remove data outside land and coarsen the spatial resolution."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#load-necessary-packages",
    "href": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#load-necessary-packages",
    "title": "Visualizing the effects of the 2017 Thomas Fire in Santa Barbara County",
    "section": "Load necessary packages",
    "text": "Load necessary packages\n\n# Import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os              \nimport numpy as np\nimport geopandas as gpd\nimport rioxarray as rioxr\nimport xarray as xr"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#read-in-data",
    "href": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#read-in-data",
    "title": "Visualizing the effects of the 2017 Thomas Fire in Santa Barbara County",
    "section": "Read in data",
    "text": "Read in data\nWe can import the aqi data directly from the urls using pandas pd.read_csv. The fire perimeter and landsat data can be downloaded from the data folder using geopandas and rasterio, respectively.\n\n# AQI data\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip')\n\n# California fire perimeters data\nfp = os.path.join('data','California_Fire_Perimeters','California_Fire_Perimeters_(all).shp')\nfire_perimeter = gpd.read_file(fp)\n\n# Landsat data\nfp2 = os.path.join('data','landsat8-2018-01-26-sb-simplified.nc')\nlandsat = rioxr.open_rasterio(fp2)"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#air-quality-index-aqi",
    "href": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#air-quality-index-aqi",
    "title": "Visualizing the effects of the 2017 Thomas Fire in Santa Barbara County",
    "section": "Air Quality Index (AQI)",
    "text": "Air Quality Index (AQI)\nWildfires are known to greatly effect air quality in surrounding areas. In this section I will use the daily AQI data to visualize the effects of the Thomas Fire on air quality in Santa Barbara County.\n\nData exploration\nIn order to familiarize myself with the data I used various python functions. The functions I used for my initial exploration were .head(), .shape, .nunique(), and .unique().\n\n# Return first 5 rows of `aqi_17_head`\naqi_17_head = aqi_17.head()\naqi_17_head\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2017-01-01\n28\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2017-01-04\n29\nGood\nPM2.5\n01-003-0010\n1\n\n\n2\nAlabama\nBaldwin\n1\n3\n2017-01-10\n25\nGood\nPM2.5\n01-003-0010\n1\n\n\n3\nAlabama\nBaldwin\n1\n3\n2017-01-13\n40\nGood\nPM2.5\n01-003-0010\n1\n\n\n4\nAlabama\nBaldwin\n1\n3\n2017-01-16\n22\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\n# Return first 5 rows of `aqi_18_head`\naqi_18_head = aqi_18.head()\naqi_18_head\n\n\n\n\n\n\n\n\n\nState Name\ncounty Name\nState Code\nCounty Code\nDate\nAQI\nCategory\nDefining Parameter\nDefining Site\nNumber of Sites Reporting\n\n\n\n\n0\nAlabama\nBaldwin\n1\n3\n2018-01-02\n42\nGood\nPM2.5\n01-003-0010\n1\n\n\n1\nAlabama\nBaldwin\n1\n3\n2018-01-05\n45\nGood\nPM2.5\n01-003-0010\n1\n\n\n2\nAlabama\nBaldwin\n1\n3\n2018-01-08\n20\nGood\nPM2.5\n01-003-0010\n1\n\n\n3\nAlabama\nBaldwin\n1\n3\n2018-01-11\n25\nGood\nPM2.5\n01-003-0010\n1\n\n\n4\nAlabama\nBaldwin\n1\n3\n2018-01-14\n33\nGood\nPM2.5\n01-003-0010\n1\n\n\n\n\n\n\n\n\n\n# Find shape of dataframes\nprint(aqi_17.shape)\nprint(aqi_18.shape)\n\n(326801, 10)\n(327541, 10)\n\n\n\n# Find number of states\nprint(aqi_17['State Name'].nunique())\naqi_18['State Name'].nunique()\n\n54\n\n\n54\n\n\n\n# Find unique states\nprint(aqi_17['State Name'].unique())\nprint(aqi_18['State Name'].unique())\n\n['Alabama' 'Alaska' 'Arizona' 'Arkansas' 'California' 'Colorado'\n 'Connecticut' 'Country Of Mexico' 'Delaware' 'District Of Columbia'\n 'Florida' 'Georgia' 'Hawaii' 'Idaho' 'Illinois' 'Indiana' 'Iowa' 'Kansas'\n 'Kentucky' 'Louisiana' 'Maine' 'Maryland' 'Massachusetts' 'Michigan'\n 'Minnesota' 'Mississippi' 'Missouri' 'Montana' 'Nebraska' 'Nevada'\n 'New Hampshire' 'New Jersey' 'New Mexico' 'New York' 'North Carolina'\n 'North Dakota' 'Ohio' 'Oklahoma' 'Oregon' 'Pennsylvania' 'Puerto Rico'\n 'Rhode Island' 'South Carolina' 'South Dakota' 'Tennessee' 'Texas' 'Utah'\n 'Vermont' 'Virgin Islands' 'Virginia' 'Washington' 'West Virginia'\n 'Wisconsin' 'Wyoming']\n['Alabama' 'Alaska' 'Arizona' 'Arkansas' 'California' 'Colorado'\n 'Connecticut' 'Country Of Mexico' 'Delaware' 'District Of Columbia'\n 'Florida' 'Georgia' 'Hawaii' 'Idaho' 'Illinois' 'Indiana' 'Iowa' 'Kansas'\n 'Kentucky' 'Louisiana' 'Maine' 'Maryland' 'Massachusetts' 'Michigan'\n 'Minnesota' 'Mississippi' 'Missouri' 'Montana' 'Nebraska' 'Nevada'\n 'New Hampshire' 'New Jersey' 'New Mexico' 'New York' 'North Carolina'\n 'North Dakota' 'Ohio' 'Oklahoma' 'Oregon' 'Pennsylvania' 'Puerto Rico'\n 'Rhode Island' 'South Carolina' 'South Dakota' 'Tennessee' 'Texas' 'Utah'\n 'Vermont' 'Virgin Islands' 'Virginia' 'Washington' 'West Virginia'\n 'Wisconsin' 'Wyoming']\n\n\nThrough my data exploration I first I viewed the first five rows of each data frame to familiarize myself with the contents of each column. I then found the size of each data frame; aqi_17 has 326801 rows and 10 colums and aqi_18 has 327541 rows and 10 columns. Next, I looked at the number of unique State Name in each data frame. Both had 54 states included. Since there are only 50 states, I next looked at the unique names for each state in the data frame. For both data frames the 4 extras are Country of Mexico, District of Columbia, Puerto Rico, and Virgin Islands.\n\n\nCombine data frames\nThe data frames are currently separate and I want them to be combined on top of each other. This can be achieved using the pandas function pd.concat().\n\naqi = pd.concat([aqi_17, aqi_18])\n\n\n\nData cleaning\nFrom our initial data exploration, I viewed that there were column names with capital letters and spaces. I can tidy the data so all column names are in lower snake case.\n\n# Initial column names\nprint(aqi.columns, '\\n')\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\n# New column names\nprint(aqi.columns, '\\n')\n\nIndex(['State Name', 'county Name', 'State Code', 'County Code', 'Date', 'AQI',\n       'Category', 'Defining Parameter', 'Defining Site',\n       'Number of Sites Reporting'],\n      dtype='object') \n\nIndex(['state_name', 'county_name', 'state_code', 'county_code', 'date', 'aqi',\n       'category', 'defining_parameter', 'defining_site',\n       'number_of_sites_reporting'],\n      dtype='object') \n\n\n\n\n\nSelecting data\nI want to select data of interest for this project which was from just Santa Barbara county. I then remove the state_name, county_name, state_code and county_code columns to leave just the date, aqi, category, defining_parameter, defining_stie, and number_of_sites_reporting columns.\n\n# Create new variable with only Santa Barbara county info \naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\n\n# Remove `state_name`, `county_name`, `state_code` and `county_code`\naqi_sb = aqi_sb.drop(['state_name', 'county_name', 'state_code', 'county_code'], axis=1)\n\nNext I wanted to ensure the date column is a pandas.datetime object. I also want the index of the dataset to be the date column.\n\n# view current data type of date column\naqi_sb['date'].dtype\n\ndtype('O')\n\n\n\n# Update date column to pandas.datetime and set as index\naqi_sb['date'] = pd.to_datetime(aqi_sb['date'])\naqi_sb = aqi_sb.set_index('date')\n\n\n# confirm date column is index\naqi_sb.head()\n\n\n\n\n\n\n\n\n\naqi\ncategory\ndefining_parameter\ndefining_site\nnumber_of_sites_reporting\n\n\ndate\n\n\n\n\n\n\n\n\n\n2017-01-01\n39\nGood\nOzone\n06-083-4003\n12\n\n\n2017-01-02\n39\nGood\nPM2.5\n06-083-2011\n11\n\n\n2017-01-03\n71\nModerate\nPM10\n06-083-4003\n12\n\n\n2017-01-04\n34\nGood\nOzone\n06-083-4003\n13\n\n\n2017-01-05\n37\nGood\nOzone\n06-083-4003\n12\n\n\n\n\n\n\n\n\n\n\nData wrangling\nNext, I want to calculate a rolling average of the AQI over a 5 day period using the rolling()method for pandas.Series. It should be added as a new column to the aqi_sb data frame.\n\naqi_sb['five_day_average'] = aqi_sb['aqi'].rolling('5D').mean()\naqi_sb.head()\n\n\n\n\n\n\n\n\n\naqi\ncategory\ndefining_parameter\ndefining_site\nnumber_of_sites_reporting\nfive_day_average\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n2017-01-01\n39\nGood\nOzone\n06-083-4003\n12\n39.000000\n\n\n2017-01-02\n39\nGood\nPM2.5\n06-083-2011\n11\n39.000000\n\n\n2017-01-03\n71\nModerate\nPM10\n06-083-4003\n12\n49.666667\n\n\n2017-01-04\n34\nGood\nOzone\n06-083-4003\n13\n45.750000\n\n\n2017-01-05\n37\nGood\nOzone\n06-083-4003\n12\n44.000000\n\n\n\n\n\n\n\n\n\n\nData visualization\nIn order to view the effects of the Thomas Fire on AQI I can make a line plot showing both the daily AQI and the 5-day average (5-day average on top of the AQI) using matplotlib.\n\n# Create line plot\nax = aqi_sb.plot(\n    y=['aqi', 'five_day_average'], # y variables\n    title='Daily & 5 Day Average AQI in Santa Barbara County',\n    xlabel='Date', # x variable\n    ylabel='AQI',        \n    color={\n        'aqi': '#008080',\n        'five_day_average': '#FF0000'\n    }\n)\n\nax.legend(['Daily AQI', '5-Day Average AQI']) # Update labels in legend\n\nplt.show() # Show the plot\n\n\n\n\n\n\n\n\nThe above graph shows AQI in Santa Barbara County from January 2017 - December 2018. Both daily AQI and an mean AQI on a 5 day rolling basis are shown. In the graph we can see a sharp spike in AQI in December 2017. This is consistent with the time of the Thomas Fire, which took place from December 4, 2017 - January 2, 2018."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#true-false-color-imagery",
    "href": "posts/2024-12-01-thomas-fire-sb/thomas-fire-sb.html#true-false-color-imagery",
    "title": "Visualizing the effects of the 2017 Thomas Fire in Santa Barbara County",
    "section": "True & false color imagery",
    "text": "True & false color imagery\n\nFire perimiter data exploration\nIn order to familiarize myself with the fire perimeter data I use data exploration techniques including finding if the CRS is projected or geographic.\n\n# Find CRS, if its projected or graphic, ellipsoid, and datum of df\nprint(f\"{'The CRS is:':&lt;25} {fire_perimeter.crs}\")\nprint(f\"{'Is the CRS geographic?:':&lt;25} {fire_perimeter.crs.is_geographic}\")\nprint(f\"{'Is the CRS projected?:':&lt;25} {fire_perimeter.crs.is_projected}\")\nprint(f\"{'ellipsoid:':&lt;25} {fire_perimeter.crs.ellipsoid}\")\nprint(f\"{'datum:':&lt;25} {fire_perimeter.crs.datum}\")\n\nThe CRS is:               EPSG:3857\nIs the CRS geographic?:   False\nIs the CRS projected?:    True\nellipsoid:                WGS 84\ndatum:                    World Geodetic System 1984 ensemble\n\n\n\n# View the first three rows of the df\nfire_perimeter.head(3)\n\n\n\n\n\n\n\n\n\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nIRWINID\nFIRE_NUM\nCOMPLEX_ID\nDECADES\ngeometry\n\n\n\n\n0\n2023\nCA\nCDF\nSKU\nWHITWORTH\n00004808\n2023-06-17\n2023-06-17\n5\n1\n1\n5.72913\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020\nPOLYGON ((-13682443.000 5091132.739, -13682445...\n\n\n1\n2023\nCA\nLRA\nBTU\nKAISER\n00010225\n2023-06-02\n2023-06-02\n5\n1\n1\n13.60240\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020\nPOLYGON ((-13576727.142 4841226.161, -13576726...\n\n\n2\n2023\nCA\nCDF\nAEU\nJACKSON\n00017640\n2023-07-01\n2023-07-02\n2\n1\n1\n27.81450\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020\nPOLYGON ((-13459243.000 4621236.000, -13458968...\n\n\n\n\n\n\n\n\n\n# Find the size of the df\nfire_perimeter.shape\n\n(22261, 19)\n\n\n\n# Find what years are included in the df\nfire_perimeter['YEAR_'].unique()\n\narray([2023, 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013,\n       2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002,\n       2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991,\n       1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980,\n       1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969,\n       1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958,\n       1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947,\n       1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936,\n       1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925,\n       1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914,\n       1913, 1912, 1911, 1910, 1909, 1908, 1907, 1906, 1905, 1903, 1902,\n       1900, 1898, 1896, 1895, 1878,    0])\n\n\n\n# Find what agencies are included in the df\nfire_perimeter['AGENCY'].unique()\n\narray(['CDF', 'LRA', 'CCO', 'FWS', 'USF', 'NPS', 'BLM', 'BIA', 'DOD',\n       None, 'OTH'], dtype=object)\n\n\nThrough the initial data exploration, we found the CRS is EPSG 3857. We also found the data is projected and not geographic and the ellipsoid is WGS 84. We viewed the first three columns of the dataframe and was able to look at the different column names. We then looked at the shape of the df and found there are 22261 rows and 19 columns. We also looked at the years that this df covers and the yeaers span from 1878-2023 with a year 0 as well. The agencies included in this df are ‘CDF’, ‘LRA’, ‘CCO’, ‘FWS’, ‘USF’, ‘NPS’, ‘BLM’, ‘BIA’, ‘DOD’, ‘OTH’, and none.\n\n\nSelecting data\nNext, I want to find subset the data to contain just the information regarding the Thomas Fire of 2017.\n\n# Select the Thomas Fire in 2017 and save to new variable\nthomas_fire = fire_perimeter[(fire_perimeter['FIRE_NAME'] == \"THOMAS\") & (fire_perimeter['YEAR_'] == 2017)] \nthomas_fire.head()\n\n\n\n\n\n\n\n\n\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nIRWINID\nFIRE_NUM\nCOMPLEX_ID\nDECADES\ngeometry\n\n\n\n\n2654\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\n2017-12-04\n2018-01-12\n9\n7\n1\n281791.0\nCONT_DATE based on Inciweb\nNone\nNone\nNone\nNone\n2010\nMULTIPOLYGON (((-13316089.016 4088553.040, -13...\n\n\n\n\n\n\n\n\n\n\nLandsat data exploration\nNow, I want to explore the leandsat data.\n\nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\nThrough the data exploration I can see it has 4 dimensions which are band, x, y, and spatial_ref. The band and spatial_ref are int64 and x and y are float64. We then have 5 data variables: red, green, blue, nir08, and swir22.\n\n\nSelecting data\nI want to drop the band dimensions of the data\n\n# Drop band dimension in landsat\nlandsat = landsat.squeeze().drop_vars(\"band\")\n\n\n\nMatch CRSs\nIt’s important to make sure the CRSs of the landsat data and thomas_fire data match so we can map them together.\n\n# Find the CRS of the landsat and thomas_fire data\nprint(f\"{'The CRS of landsat is:':&lt;27} {landsat.rio.crs}\")\nprint(f\"{'The CRS of thomas_fire is:':&lt;27} {thomas_fire.crs}\")\n\nThe CRS of landsat is:      EPSG:32611\nThe CRS of thomas_fire is:  EPSG:3857\n\n\n\n# Reproject thomas_fire crs and verify they match\nthomas_fire = thomas_fire.to_crs(landsat.rio.crs)\nprint('Matched CRS?',  thomas_fire.crs == landsat.rio.crs)\n\nMatched CRS? True\n\n\n\n\nTrue color imagery\nI created a map of true color imagery and the Thomas Fire boundary to see if true color imagery captures the effects of the fire on the land.\n\n# Create map with ftrue color image and the Thomas Fire boundary\nfig, ax = plt.subplots(figsize = (10, 10)) # Setup plot\nlandsat[['red', 'green', 'blue']].to_array().plot.imshow(ax = ax, robust = True) # Plot the landsat bands\n\nthomas_fire.boundary.plot(ax = ax, edgecolor = 'blue', linewidth = 2, label=\"Thomas Fire Boundary\") # Plot the thomas fire data on same plot\n\nax.set_title(\"Thomas Fire(2017) Boundary with True Color\") # Set title\nax.set_xlabel(\"Longitude\") # Set x axis label\nax.set_ylabel(\"Latitude\")# Set y axis label\nax.legend() # Make legend\n\nplt.show() # Show map\n\n\n\n\n\n\n\n\nThis map is showing a section of California that includes Ventura and Santa Barbara counties with true color imagery. The bands included in this true color image are red, green, and blue. The Thomas Fire of 2017 boundary is outlined shown in blue. From this true color image, you can not see any impact of the fire. The area where the fire took place looks similar to surrounding areas. This satellite imagery was from 1/26/2018 and the Thomas Fire started 12/4/2017 and was contained on 1/12/2018. This imagery is therefore taken shortly after the fire was contained.\n\n\nFalse color imagery\nI created a map of false color imagery and the Thomas Fire boundary to view the effects of the fire on the land.\n\n# Create map with false color image and the Thomas Fire boundary\nfig, ax = plt.subplots(figsize = (10, 10)) # Setup plot\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax, robust = True) # Plot the landsat bands\n\nthomas_fire.boundary.plot(ax = ax, edgecolor = 'blue', linewidth = 2, label=\"Thomas Fire Boundary\") # Plot the thomas fire data on same plot\n\nax.set_title(\"Thomas Fire(2017) Boundary with False Color\") # Set title\nax.set_xlabel(\"Longitude\") # Set x axis label\nax.set_ylabel(\"Latitude\")# Set y axis label\nax.legend() # Make legend\n\nplt.show() # Show map\n\n\n\n\n\n\n\n\nThis map is showing a section of California that includes Ventura and Santa Barbara counties with false color imagery. The bands included in this false color image are short wave infared(SWIR), near infared(NIR), and red. The Thomas Fire of 2017 boundary is outlined shown in blue. Compared to the true color image, you can see a drastic difference in areas where the fire took place and areas that were not burned. Recently burned areas appear red due to the fact that they highly reflect shortwave infared. You can see the red inside the Thomas Fire boundary. This satellite imagery was from 1/26/2018 and the Thomas Fire started 12/4/2017 and was contained on 1/12/2018. This imagery is therefore taken shortly after the fire was contained.\nInformation on false color imagery was obtained from:\n\nhttps://earthobservatory.nasa.gov/features/FalseColor\nhttps://www.usgs.gov/faqs/what-are-band-designations-landsat-satellites\nhttps://www.usgs.gov/media/images/common-landsat-band-combinations"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Coming soon:)"
  },
  {
    "objectID": "about.html#a-short-background",
    "href": "about.html#a-short-background",
    "title": "About Me",
    "section": "",
    "text": "Coming soon:)"
  },
  {
    "objectID": "about.html#currently",
    "href": "about.html#currently",
    "title": "About Me",
    "section": "Currently",
    "text": "Currently\nComing soon:)"
  },
  {
    "objectID": "about.html#fun-stuff",
    "href": "about.html#fun-stuff",
    "title": "About Me",
    "section": "Fun Stuff!",
    "text": "Fun Stuff!\nComing soon:)"
  }
]